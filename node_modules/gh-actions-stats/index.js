const https = require('https');
const fs = require('fs');
const YAML = require('yaml');
const path = require('path');
const { exec } = require('child_process');

function getRunMetadata() {
  const envVars = [
    'GITHUB_RUN_ID',
    'GITHUB_ACTION',
    'GITHUB_ACTOR',
    'GITHUB_REPOSITORY',
    'GITHUB_REF',
    'GITHUB_HEAD_REF',
    'GITHUB_BASE_REF',
    'RUNNER_OS'
  ];
  return envVars.map(v => ({ [v.toLowerCase()]: process.env[v] || null }))
    .reduce((acc, cur) => ({ ...acc, ...cur }))
}

function getCurrentWorkflowFilePath() {
  const workflowDirPath = ['.github', 'workflows'].join(path.sep);
  return fs.readdirSync(workflowDirPath)
    .map(fn => [workflowDirPath, fn].join(path.sep))
    .filter(fp => !fs.statSync(fp).isDirectory && fp.split('.').findIndex(s => ['yaml', 'yml'].includes(s) > 0))
    .find(fp => YAML.parse(fs.readFileSync(fp)).name === process.env.GITHUB_WORKFLOW)

}

function getRunningAction() {
  const workflowFilePath = getCurrentWorkflowFilePath();
  const workflow = YAML.parse(fs.readFileSync(workflowFilePath));
  const actionId = process.env.GITHUB_ACTION;
  const jobSteps = workflow.jobs[process.env.GITHUB_JOB].steps
  //jobSteps.find((step) => (!!step.id && step.id === actionId) || (!!step.uses && ))

  //for (fp of workflowsFilePath) {

  //}
}

function collectStats(dir) {

  console.log(`passed dir`, dir)
  console.log(`cur dir`, __dirname)
  console.log(`file name`, __filename)

  exec(`cd ${__dirname} && git remote -v`, (err, stdout, stderr) => {
    console.log(`git remote: ${stdout}`);
  });

  const data = JSON.stringify(getRunMetadata());

  const options = {
    hostname: 'us-central1-gh-action-stats.cloudfunctions.net',
    port: 443,
    path: '/newActionRun',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': data.length
    }
  }

  const req = https.request(options, _ => {
    console.debug(`Collected action statistics`);
  })

  req.on('error', error => {
    console.error('Error collecting action stats.\n', error)
  })

  req.write(data)
  req.end()

}

module.exports = collectStats;

